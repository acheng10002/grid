.flex-container-1 {
    display: flex;
}
  
.flex-container-1 div {
    background: peachpuff;
    border: 4px solid brown;
    height: 100px;
    flex: 1;
}

.flex-container-2 {
    display: flex;
    flex-direction: column;
}
  
.flex-container-2 div {
    background: peachpuff;
    border: 4px solid brown;
    height: 80px;
    flex: 1 1 auto;
}

.grid-container {
    display: grid;
    grid-template-columns: 75px 75px 75px;
    grid-template-rows: 95px 95px;
    gap: 32px;
}
  
.card {
    background-color: peachpuff;
    border: 1px solid black;
}

/* turns an element into a grid container (or use, display: inline-grid) */
.container {
    display: grid;

    /* rows defined before the slash and columns after */
    /* columns and rows don't have to share the same values; first column is 5x as wide as the others */
    grid-template: 50px 50px / 250px 50px 50px; 
}

.container-1 {
    display: grid;
    grid-template: 50px 50px / 50px 50px; 

    /* implicit grid sizes - here, staying the same value as my explicit row track sizes */
    grid-auto-rows: 50px;
}

.container-2 {
    display: grid;
    grid-template-columns: 50px 50px;
    grid-template-rows: 50px 50px;

    /* slight grid column gap to space out my 2 columns */
    column-gap: 10px;

    /* big grid row gap to space out my 2 rows */
    row-gap: 100px;

    /* or
    gap: 20px;  to set both row-gap and column-gap */
} 
    
/* > is the child combinator or direct child selector */
.container-2 > div {
    border: 1px solid blue;
}

/* child elements get placed into the grid with grid-column and grid-row
    similar to flexbox, the source order of the grid items doesn't matter; my CSS can place them in any order
    I can define the layout of my entrie page, and hten completely rearrange it to accommodate a different screen width with a couple lines of CSS */

.container-3 {
    /* generates an inline-level grid */
    display: inline grid;
    grid-template-columns: 75px 75px 75px;
    grid-template-rows: 95px 95px;
    gap: 32px;
}
  
.card {
    background-color: peachpuff;
    border: 1px solid black;
}

:root {
    --yellow: #ffc600;
    --black: #272727;
}

html {
    /* border-box box model allows me to add padding and border to my elements without increasing their size */
    box-sizing: border-box;
    /* A system font stack so things load nice and quick! */
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica,
      Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
    font-weight: 900;
    font-size: 10px;
    color: var(--black);
    text-shadow: 0 2px 0 rgba(0, 0, 0, 0.07);
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

body {
    background-image: url("./images/topography.svg"),
      linear-gradient(110deg, #f93d66, #6d47d9);
    background-size: 340px, auto;
    min-height: calc(100vh - 100px);
    margin: 50px;
    /* background: white; */
    background-attachment: fixed;
    letter-spacing: -1px;
}
  
h1,
h2,
h3,
h4,
h5,
h6 {
    margin: 0 0 5px 0;
}

.container-4 {
    display: grid;
    grid-gap: 20px;
    grid-template-columns: 200px 400px;

    /* once I define the values for the rows, the track lines become explicit-solid and dashed, and no longer implicit-solid and dotted */
    grid-template-rows: 50px 100px; 

    /* solid lines - where explicit grid starts and ends*/

    /* for sizing implicit rows, items 5 and 6, and any future implicit rows */
    grid-auto-rows: 100px 500px;

    grid-auto-columns: 100px;
}

.item-4 {
    display: grid; 
    justify-content: center;
    align-items: center;
    border: 5px solid rgba(0, 0, 0, 0.03);
    border-radius: 3px;
    font-size: 35px;
    background-color: var(--yellow);
}

.item-4 p {
    margin: 0 0 5px 0;
}