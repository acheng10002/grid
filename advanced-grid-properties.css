.grid-container {
    resize: both; /* allows the user to resize the container by clicking and dragging from the bottom right corner; especially useful when I use properties to resize my grid tracks based on the size of the grid */
    overflow: auto; /* enables scrolling if I resize the container to be smaller than my grid can accommodate */
    display: grid;
    gap: 4px; /* establishes a "gutter" area to visualize the grid items better */
    padding: 4px; /* establishes a "gutter" area to visualize the grid items better */
    border: 1px solid grey; /* to make container look nicer */
    background-color: skyblue; /* to make container look nicer */
    
    grid-template-rows: repeat(2, 150px); /* repeat() lets me define a number of rows or columns and the size I want them to be without having to manually type out each individual track's size */
    grid-template-columns: repeat(5, 150px);
    /* grid-template-rows: 150px 150px;
    grid-template-columns: 150px 150px 150px 150px 150px; */
}


/* grid-item, p, img selectors are here to make my grid items look a bit nicer */ 
.grid-item {
    background-color: #444;
    text-align: center;
    color: #ddd;
    font-family: sans-serif;
    font-size: 1.5rem;
    padding: 12px;
}

p {
    margin: 12px auto 24px;
}

img {
    height: 60px;
}

.grid-container-1 {
    resize: both; 
    overflow: auto; 
    display: grid;
    gap: 4px; 
    padding: 4px; 
    border: 1px solid grey; 
    background-color: skyblue; 

    /* fr - way of distributing whatever remaning space is left in the grid; makes my grid items dynamic/flexible/responsive in some way */
    grid-template-rows: repeat(2, 1fr); 
    grid-template-columns: repeat(5, 1fr);
}

.grid-container-2 {
    resize: both; 
    overflow: auto; 
    display: grid;
    gap: 4px; 
    padding: 4px; 
    border: 1px solid grey; 
    background-color: skyblue; 
    
    /* distribute the remaining space disproportionately; grid grows and shrinks dynamicaly */
    grid-template-rows: repeat(2, 1fr); 
    grid-template-columns: repeat(2, 2fr) repeat(3, 1fr);
}

.grid-container-3 {
    resize: both; 
    overflow: auto; 
    display: grid;
    gap: 4px; 
    padding: 4px; 
    border: 1px solid grey; 
    background-color: skyblue; 
    
    /* distribute the remaining space disproportionately; grid grows and shrinks dynamicaly */
    grid-template-rows: repeat(2, 1fr); 
    grid-template-columns: repeat(2, 125px) repeat(3, 1fr);
}

/* there is no limit to how large the grid items will become; there is a distinct "smallest" size the grid will allow its items to go:  
   it's the smallest size either the <p> or <img> element can be without overflowing 
   min-content property- the smallest size the grid will allow its items to go */

.grid-container-4 {
    resize: both; 
    overflow: auto; 
    display: grid;
    gap: 4px; 
    padding: 4px; 
    border: 1px solid grey; 
    background-color: skyblue; 
    
    /* when dynamic values are provided as arguments to min() and max(), much more responsive */
    grid-template-rows: repeat(2, min(200px, 50%)); /* in realtime, tells the grid the track size should be 50% of the grid's total veritcal space, unless that number would exceed 20px */
    grid-template-columns: repeat(5, max(120px, 15%)); /* in realtime, tells the grid the column size should be calculated based on the larger of the two values */
}

.grid-container-5 {
    resize: both; 
    overflow: auto; 
    display: grid;
    gap: 4px; 
    padding: 4px; 
    border: 1px solid grey; 
    background-color: skyblue; 
    
    grid-template-rows: repeat(2, 1fr); 

    /* minmax() can only be used with grid-template-columns, grid-template-rows, grid-auto-columns
       2 arguments are: min size the track can be and the max size the track can be */
    grid-template-columns: repeat(5, minmax(150px, 200px));
}

.grid-container-6 {
    resize: both; 
    overflow: auto; 
    display: grid;
    gap: 4px; 
    padding: 4px; 
    border: 1px solid grey; 
    background-color: skyblue; 
    
    grid-template-rows: repeat(2, 1fr); 

    /* clamp(minimum-size, ideal-size, maximum-size) 
       dynamic value should be used as the ideal size, and static sizes for the min and max sizes */
    grid-template-columns: repeat(5, clamp(150px, 20%, 200px));
}

/* clamp() and minmax() make grids more responsive and ensure that I don't hit critical breakpoints that make my website look bad 
   this is imeprative when using images and elements that may have a tendency to overflow or render in undesirable ways when pushed to extreme sizes */

.grid-container-7 {
    resize: both; 
    overflow: auto; 
    display: grid;
    gap: 4px; 
    padding: 4px; 
    border: 1px solid grey; 
    background-color: skyblue; 
    
    grid-template-rows: repeat(2, 1fr); 

    /* use case for auto-fit and auto-fill: I want to give my grid a number of columns that is flexible based on the size fo the grid
       both auto-fit and auto-fill will return "the largest possible positive integer" without the grid items overflowing their container */
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); /* telling the grid I want as many columns as possible, using minmax() to determine each column's size, without the grid overflowing */

    /* auto-fit returns the highest positive integer as the number of columns
       1. browser has to know how wide my grid is: it's just the window's width minus margins since it wasn't explicitly set 
       2. browser needs to know how many grid column tracks could possibly fit that width- uses the min value in minmax() function
          this will yield the highest number of items, which is 150px
       3. browser resizes the columns up to the max values allowed by my minmax() function
       
       when there are fewer items than can fill up the entirety of the grid row once 
       when the grid is expanded to a size where another grid item could fit, but there aren't any left...
       auto-fit will keep the grid items at their max size
       auto-fill will make the grid items snap back down to their min size once the space becomes available to add another grid item, even if there isn't one to be rendered
            with auto-fill, grid items will continue their pattern of growing to max and snapping back to their min as the grid expands and more room becomes available for new grid tracks 
       */
}

.grid-container-8 {
    resize: both; 
    overflow: auto; 
    display: grid;
    gap: 4px; 
    padding: 4px; 
    border: 1px solid grey; 
    background-color: skyblue; 
    
    grid-template-rows: repeat(2, 1fr); 
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); /* auto-fit will keep the grid items at their max size */
}

.grid-container-9 {
    resize: both; 
    overflow: auto; 
    display: grid;
    gap: 4px; 
    padding: 4px; 
    border: 1px solid grey; 
    background-color: skyblue; 
    
    grid-template-rows: repeat(2, 1fr); 
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); /* auto-fill will make the grid items snap back down to their min size once the space becomes available to add another grid item, even if there isn't one to be rendered */
}
