.container {
    display: grid;
    grid-template-rows: 100px 100px 100px;
    /* e.g.
       min-content 1fr min-content
       100px 1fr max-content */
    grid-template-columns: 100px 100px 100px;
    /* e.g. 1fr 1fr
        minmax(10px, 1fr) 3fr
        repeat(5, 1fr)
        50px auto 100px 1fr */

    /* column tracks are the spaces between my columns */

    /* third value makes a third column */
    /* grid-template-columns: 50px 50px 50px;

    row tracks are the spaces between my rows 
    grid-template-rows: 50px 50px; */

    /* grid lines are used position grid items 
       grid cell - space shared by a single row track and a single column track 
       each child element of a grid occupies one cell */

    /* values represent track size, and the space between them represent the grid lines 
       track-size - can be a length, a percentage, or a fraction of the free space in the grid, using the fr unit 
       line-name - arbitrary name of my choosing */
}

.item {
    background-color: orange;
    border: 1px solid black;
    text-align: center;
}

.first-row {
    background-color: pink;
}

.last-column {
    background-color: lightblue;
}

.container-1 {
    display: inline-grid;
    grid-template: 40px 40px 40px 40px 40px / 40px 40px 40px 40px 40px;
    background-color: lightblue; 

    /* grid-template-areas: "living-room living-room living-room living-room living-room"
       "living-room living-room living-room living-room living-room"
       "bedroom bedroom bathroom kitchen kitchen"
       "bedroom bedroom bathroom kitchen kitchen"
       "closet closet . . ."
       
       . indicates empty cells */
}
    /* grid-template-areas - defines a grid template by referencing the names of the grid areas 
       specified with grid-area property

       <grid-area-name> - name of a grid area specified with grid-area
       . signifies an empty grid cell
       none - no grid areas are defined

       .container {
        grid-template-areas: "<grid-area-name> | . | none | ..."
        "...";
    */

    /* grid lines are automatically assigned positive numbers (-1 being an alternate for the very last row or the very last column 
    
       the lines may be explicitly named using bracket syntax for line names
       .container {
           grid-template-columns: [first] 40px [line2] 50 px [line3] auto [col4-start] 50px [five] 40px [end] 
           grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line] 
           
       a line can have more than one name
   
       use repeat() notation to streamline definitions with repeating parts
       .container {
           grid-template-columns: repeat(3, 20px [col-start]);
           (same as grid-template-columns: 20px [col-start] 20px [col-start] 20px [col-start])
       } 

       multiple lines that share the same name can be referenced by their line name and count
       .item {
        grid-column-start: col-start 2;
       }
   
       fr unit - lets me set the size of track as a fraction of the free space of the grid container
       .container {
           grid-template-columns: 1fr 1fr 1fr;
           (this sets each item to one third the width of the grid container
       }
   
       free space is calculated after any non-flexible items
       */

.room {
    border: 1px solid;
    font-size: 50%;
    text-align: center;
}

#living-room {
    grid-area: 1 / 1 / 3 / 6;
    /* above is same as-
    grid-column-start: 1;
    grid-column-end: 6;
    grid-row-start: 1;
    grid-row-end: 3; 
    
    grid-area can be used to create a visual layout of the grid in words
    grid-area: living-room;
    */

}

#kitchen {
    grid-column: 4 / 6;
    grid-row: 3 / 6;

    /* grid-area: kitchen; */
}

#bedroom {
    grid-column: 1 / 3;
    grid-row: 3 / 5;
    /* grid-area: bedroom; */
}

#bathroom {
    grid-column: 3 / 4;
    grid-row: 3 / 6;

    /* grid-area: bathroom; */
}

#closet {
    grid-column: 1 / 3;
    grid-row: 5 / 6;

    /* grid-area: closet; */
}

/* .grid-item {
        grid-column-start: <number> | <name> | span <number> | span <name> | auto;
        grid-column-end: <number> | <name> | span <number> | span <name> | auto;
        grid-row-start: <number> | <name> | span <number> | span <name> | auto;
        grid-row-end: <number> | <name> | span <number> | span <name> | auto;
    }

    above 4 properties determine an item's location within the grid by referring to specific grid lines

    <line> - can be a number or name to refer to a numbered or named grid line
    span <number> - item will span across the provided number of grid tracks
    span <name> - item will span across until it hits the next line with the provided name
    auto - indicates auto-placement, an automatic span, or a default span of one

    .item-a {
        grid-column-start: 2;
        grid-column-end: five;
        grid-row-start: row1-start;
        grid-row-end: 3;
    }

    .item-b {
        grid-column-start: 1;
        grid-column-end: span col4-start;
        grid-row-start: 2;
        grid-row-end: span 2;
    }

    if no grid-column-end/grid-row-end is declared, item will span 1 track by default

    items can overlap each other; us z-index to control their stacking order

    .item {
        grid-column: <start-line> / <end-line> | <start-line> / span <value>;
        grid-row: <start-line> / <end-line> | <start-line> / span <value>;

    .item-c {
        grid-column: 3 / span 2;
        grid-row: third-line / 4;
    }

    grid-area - gives an item a name so that it can be referenced by a template created with grid-template-areas
    grid-area - also shorter shorthand for 
        grid-column-start: ;
        grid-column-end: ;
        grid-row-start: ;
        grid-row-end: ;

    <name> - name of my choosing
    <row-start> / <column-start> / <row-end> / <column-end> - can be numbers or named lines

    .item-d {
        grid-area: header;
    }

    .item-e {
        grid-area: 1 / col4-start / last-line / 6;
    }
*/